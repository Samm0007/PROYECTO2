/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.arboledecision;

import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author isa
 */
public class Interfaz extends javax.swing.JFrame {

    private static BufferedReader keyboardInput = new BufferedReader(new InputStreamReader(System.in));
    private static DecisionTree newTree;
    private static HashTable tabla_hash;
    private static String COMMA_DELIMITER = ",";
    private String fileRoute;
    private static boolean fileLoaded = false;
    private static File file;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("CARGAR CONOCIMIENTOS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("PLAY");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("DIBUJAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("BUSCAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("RESETEAR CONOCIMIENTOS");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1420, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(500, 500, 500)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!fileLoaded) {
            JOptionPane.showMessageDialog(null, "Debe cargar la Base de Conocimientos antes");
            return;
        }

        // Output tree
        System.out.println("\nOUTPUT ARBOLES DE DECISION");
        System.out.println("====================");
        newTree.outputBinTree();

        try {
            // Query tree
            queryTree();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        loadFile();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!fileLoaded) {
            JOptionPane.showMessageDialog(null, "Debe cargar la Base de Conocimientos antes");
            return;
        }
        String conocimiento = JOptionPane.showInputDialog("¿Qué conocimiento deseas buscar?");

        if (conocimiento == null) {
            return;
        }

        conocimiento = limpiar(conocimiento).trim().toLowerCase();
        BinNode temp = tabla_hash.buscar(conocimiento);

        if (temp != null && temp.getQuestOrAns().equalsIgnoreCase(conocimiento)) {
            JOptionPane.showMessageDialog(null, "El conocimiento " + conocimiento + " Si existe en nuestra base de conocimientos");
        } else {
            JOptionPane.showMessageDialog(null, "El conocimiento " + conocimiento + " No existe en nuestra base de conocimientos");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        fileRoute = "";
        fileLoaded = false;
        file = null;
        newTree = null;
        tabla_hash = null;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (!fileLoaded) {
            JOptionPane.showMessageDialog(null, "Debe cargar la Base de Conocimientos antes");
            return;
        }
        newTree.setTotalnodes(0);
        newTree.computeNodePositions(); //finds x,y positions of the tree nodes
        newTree.setMaxheight(newTree.treeHeight(newTree.getRootNode())); //finds tree height for scaling y axis
        DisplaySimpleTree dt = new DisplaySimpleTree(newTree);//get a display panel
        dt.setSize(new Dimension(1000, 800));
        dt.setLocation(500, 0);
        dt.setVisible(true); //show the display
    }//GEN-LAST:event_jButton2ActionPerformed

    private void loadFile() {
        // Se crea un objeto de la clase JFileChooser para escoger el archivo
        JFileChooser filePath = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        // se invoca la función showsOpenDialog para mostrar el diálogo de guardar
        int r = filePath.showOpenDialog(null);

        // Cuando el usuario selecciona un archivo
        if (r == JFileChooser.APPROVE_OPTION) {

            fileRoute = filePath.getSelectedFile().getAbsolutePath();
            // establecer la etiqueta en la ruta del archivo seleccionado

            System.out.println(fileRoute);

            //Validación para la seleccion de un archivo txt
            if (!fileRoute.endsWith("csv")) {
                JOptionPane.showMessageDialog(null, "formato de archivo no valido, intente de nuevo");
                return;
            }

            // Archivo cargado
            fileLoaded = true;
            file = new File(fileRoute);
// Generate tree
            generateTree();
        }
    }

    private static String limpiar(String texto) {
        String original = "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ";
        // Cadena de caracteres ASCII que reemplazarán los originales.
        String ascii = "AAAAAAACEEEEIIIIDNOOOOOOUUUUYBaaaaaaaceeeeiiiionoooooouuuuyy";
        String output = texto;
        for (int i = 0; i < original.length(); i++) {
            // Reemplazamos los caracteres especiales.

            texto = texto.replace(original.charAt(i), ascii.charAt(i));

        }
        return texto;
    }

    static void generateTree() {
        System.out.println("\nGENERAR ARBOLES DE DECISION");
        System.out.println("======================");

        // Create instance of class DecisionTree
        newTree = new DecisionTree();
        newTree.setFile(file);

        tabla_hash = new HashTable(10111);
        try ( BufferedReader br = new BufferedReader(
                new InputStreamReader(new FileInputStream(file)));) {
            String line;
            int cont = 1;
            while ((line = br.readLine()) != null) {

                String[] values = line.split(COMMA_DELIMITER);
                String node = values[0];
                String nodeNo = values[1];
                String nodeYes = values[2];

                node = limpiar(node).trim().toLowerCase();
                nodeNo = limpiar(nodeNo).trim().toLowerCase();
                nodeYes = limpiar(nodeYes).trim().toLowerCase();

                newTree.setInputString(newTree.getInputString() + " " + node);

                System.out.println("node " + node);
                System.out.println("nodeL " + nodeNo);
                System.out.println("nodeR " + nodeYes);

                if (cont == 1) { //create root
                    int rootId = tabla_hash.insertar(node);
                    int noId = tabla_hash.insertar(nodeNo);
                    int yesId = tabla_hash.insertar(nodeYes);

                    newTree.createRoot(rootId, node);
                    newTree.addNoNode(rootId, noId, nodeNo);
                    newTree.addYesNode(rootId, yesId, nodeYes);
                } else {
                    int fatherId = tabla_hash.insertar(node);
                    int noId = tabla_hash.insertar(nodeNo);
                    int yesId = tabla_hash.insertar(nodeYes);

                    newTree.addNoNode(fatherId, noId, nodeNo);
                    newTree.addYesNode(fatherId, yesId, nodeYes);
                }

                cont++;

            }
        } catch (FileNotFoundException ex) {
            System.out.println("Exception");
        } catch (IOException ex) {
            System.out.println("Exception");
        }

    }

    /* QUERY TREE */
    static void queryTree() throws IOException {
        System.out.println("\nQUERY ARBOL DECISION");
        System.out.println("===================");
        newTree.queryBinTree();

        // Option to exit
        optionToExit();
    }

    /* OPTION TO EXIT PROGRAM */
    static void optionToExit() throws IOException {
        String[] options = {"Si", "No"};
        int result = JOptionPane.showOptionDialog(
                null,
                "¡Qué fácil, ponlo más difícil la próxima vez! ¿Deseas salir?",
                "Seguir jugando",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //no custom icon
                options, //button titles
                options[0] //default button
        );
//        if (result == -1) {
//            return;
//        }
        // String answer = result == 0 ? "Si" : "No";
        String answer = "";
        if (result == 0) {
            answer = "Si";
        } else if (result == 1) {
            answer = "No";
        }
        System.out.println("¿Deseas salir?");
        //   String answer = keyboardInput.readLine();
        generateTree();
        if (answer.equalsIgnoreCase("Si")) {
            return;
        } else {
            if (answer.equalsIgnoreCase("No")) {
                

                // Output tree
                System.out.println("\nOUTPUT ARBOLES DE DECISION");
                System.out.println("====================");
                newTree.outputBinTree();
                queryTree();
            } else {
                System.out.println("ERROR: Debe responder \"Si\" o \"No\"");
                optionToExit();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
